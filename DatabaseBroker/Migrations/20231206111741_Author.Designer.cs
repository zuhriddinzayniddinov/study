// <auto-generated />
using System;
using System.Collections.Generic;
using DatabaseBroker.Context;
using Entity.Models.Learning;
using Entitys.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DatabaseBroker.Migrations
{
    [DbContext(typeof(PortalDataContext))]
    [Migration("20231206111741_Author")]
    partial class Author
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entity.Models.Learning.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<MultiLanguageField>("Content")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<MultiLanguageField>("Description")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("description");

                    b.Property<List<int>>("HashtagId")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("hashtag_id");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<MultiLanguageField>("Title")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("article", "learning");
                });

            modelBuilder.Entity("Entity.Models.Learning.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageLinc")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_linc");

                    b.Property<MultiLanguageField>("Name")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("author", "learning");
                });

            modelBuilder.Entity("Entity.Models.Learning.AuthorToCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("author_to_category", "learning");
                });

            modelBuilder.Entity("Entity.Models.Learning.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<MultiLanguageField>("Description")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("description");

                    b.Property<string>("ImageLinc")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_linc");

                    b.Property<MultiLanguageField>("Title")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("category", "learning");
                });

            modelBuilder.Entity("Entity.Models.Learning.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<MultiLanguageField>("Description")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("description");

                    b.Property<List<string>>("DocsUrl")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("docs_url");

                    b.Property<List<int>>("HashtagId")
                        .HasColumnType("integer[]")
                        .HasColumnName("hashtag_id");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<MultiLanguageField>("Title")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("course", "learning");
                });

            modelBuilder.Entity("Entity.Models.Learning.Exam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("close_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("QuizId")
                        .HasColumnType("bigint")
                        .HasColumnName("quiz_id");

                    b.Property<int>("RemainedHeart")
                        .HasColumnType("integer")
                        .HasColumnName("remained_heart");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("exams");
                });

            modelBuilder.Entity("Entity.Models.Learning.Hashtag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("hashtag", "learning");
                });

            modelBuilder.Entity("Entity.Models.Learning.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DocLink")
                        .HasColumnType("text")
                        .HasColumnName("doc_link");

                    b.Property<string>("ImageLink")
                        .HasColumnType("text")
                        .HasColumnName("image_link");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<MultiLanguageField>("QuestionContent")
                        .HasColumnType("jsonb")
                        .HasColumnName("question_content");

                    b.Property<int>("QuestionType")
                        .HasColumnType("integer")
                        .HasColumnName("question_type");

                    b.Property<long>("QuizId")
                        .HasColumnType("bigint")
                        .HasColumnName("quiz_id");

                    b.Property<int?>("TotalBall")
                        .HasColumnType("integer")
                        .HasColumnName("total_ball");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("questions", "learning");

                    b.HasDiscriminator<int>("QuestionType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Entity.Models.Learning.QuestionInExam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("ExamId")
                        .HasColumnType("bigint")
                        .HasColumnName("exam_id");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint")
                        .HasColumnName("question_id");

                    b.Property<int>("QuestionType")
                        .HasColumnType("integer")
                        .HasColumnName("question_type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("question_in_exams");

                    b.HasDiscriminator<int>("QuestionType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Entity.Models.Learning.Quiz", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<MultiLanguageField>("Description")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("description");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<int>("Heart")
                        .HasColumnType("integer")
                        .HasColumnName("heart");

                    b.Property<int?>("PassingScore")
                        .HasColumnType("integer")
                        .HasColumnName("passing_score");

                    b.Property<MultiLanguageField>("Title")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("title");

                    b.Property<int>("TotalScore")
                        .HasColumnType("integer")
                        .HasColumnName("total_score");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("quizzes", "learning");
                });

            modelBuilder.Entity("Entity.Models.Learning.SeminarVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<List<int>>("HashtagId")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("hashtag_id");

                    b.Property<MultiLanguageField>("Title")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("title");

                    b.Property<string>("VideoLinc")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("video_linc");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("seminar_video", "learning");
                });

            modelBuilder.Entity("Entity.Models.Learning.ShortVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<List<int>>("HashtagId")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("hashtag_id");

                    b.Property<MultiLanguageField>("Title")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("title");

                    b.Property<string>("VideoLinc")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("video_linc");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("short_video", "learning");
                });

            modelBuilder.Entity("Entity.Models.Learning.VideoOfCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<MultiLanguageField>("Content")
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<List<string>>("DocsUrl")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("docs_url");

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<MultiLanguageField>("Title")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("title");

                    b.Property<string>("VideoLinc")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("video_linc");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("video_of_course", "learning");
                });

            modelBuilder.Entity("Entity.Models.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<MultiLanguageField>("Name")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("permissions", "auth");
                });

            modelBuilder.Entity("Entity.Models.SignMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_sign_methods", "auth");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Entity.Models.StaticFiles.StaticFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FileExtension")
                        .HasColumnType("text")
                        .HasColumnName("file_extension");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<long?>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.ToTable("static_files", "asset");
                });

            modelBuilder.Entity("Entity.Models.Structure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<MultiLanguageField>("Name")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("structures", "auth");
                });

            modelBuilder.Entity("Entity.Models.StructurePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("GrantedById")
                        .HasColumnType("bigint")
                        .HasColumnName("granted_by_id");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("permission_id");

                    b.Property<long>("StructureId")
                        .HasColumnType("bigint")
                        .HasColumnName("structure_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("StructureId");

                    b.ToTable("structure_permissions", "auth");
                });

            modelBuilder.Entity("Entity.Models.TokenModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpireRefreshToken")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expire_refresh_token");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<int>("TokenType")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("tokens", "auth");
                });

            modelBuilder.Entity("Entity.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text")
                        .HasColumnName("middlename");

                    b.Property<long?>("StructureId")
                        .HasColumnType("bigint")
                        .HasColumnName("structure_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("StructureId");

                    b.ToTable("users", "auth");
                });

            modelBuilder.Entity("Entity.Models.UserCertificate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BusinessCategory")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("business_category");

                    b.Property<string>("CN")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cn");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("O")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("o");

                    b.Property<string>("OU")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ou");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<string>("PINFL")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pinfl");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("serial_number");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("surname");

                    b.Property<string>("TIN")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tin");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("uid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.ToTable("user_certificates", "auth");
                });

            modelBuilder.Entity("Entity.Models.Learning.SimpleQuestion", b =>
                {
                    b.HasBaseType("Entity.Models.Learning.Question");

                    b.Property<List<SimpleQuestionOption>>("Options")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("options");

                    b.ToTable("questions", "learning");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Entity.Models.Learning.SimpleQuestionInExam", b =>
                {
                    b.HasBaseType("Entity.Models.Learning.QuestionInExam");

                    b.Property<List<SimpleQuestionOption>>("Options")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("options");

                    b.Property<Guid?>("Selected")
                        .HasColumnType("uuid")
                        .HasColumnName("selected");

                    b.HasIndex("ExamId");

                    b.ToTable("question_in_exams");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Entity.Models.DefaultSignMethod", b =>
                {
                    b.HasBaseType("Entity.Models.SignMethod");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.ToTable("user_sign_methods", "auth");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Entity.Models.ESISignMethod", b =>
                {
                    b.HasBaseType("Entity.Models.SignMethod");

                    b.Property<string>("CertSerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("user_sign_methods", "auth");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Entity.Models.OneIDSignMethod", b =>
                {
                    b.HasBaseType("Entity.Models.SignMethod");

                    b.Property<string>("PINFL")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pinfl");

                    b.ToTable("user_sign_methods", "auth");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Entity.Models.Learning.Article", b =>
                {
                    b.HasOne("Entity.Models.Learning.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Learning.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entity.Models.Learning.AuthorToCategory", b =>
                {
                    b.HasOne("Entity.Models.Learning.Author", null)
                        .WithMany("Categories")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Learning.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entity.Models.Learning.Course", b =>
                {
                    b.HasOne("Entity.Models.Learning.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Learning.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entity.Models.Learning.Exam", b =>
                {
                    b.HasOne("Entity.Models.Learning.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Models.Learning.Question", b =>
                {
                    b.HasOne("Entity.Models.Learning.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("Entity.Models.Learning.Quiz", b =>
                {
                    b.HasOne("Entity.Models.Learning.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Entity.Models.Learning.SeminarVideo", b =>
                {
                    b.HasOne("Entity.Models.Learning.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Learning.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entity.Models.Learning.ShortVideo", b =>
                {
                    b.HasOne("Entity.Models.Learning.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Learning.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entity.Models.Learning.VideoOfCourse", b =>
                {
                    b.HasOne("Entity.Models.Learning.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Entity.Models.SignMethod", b =>
                {
                    b.HasOne("Entity.Models.User", "User")
                        .WithMany("SignMethods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Models.StructurePermission", b =>
                {
                    b.HasOne("Entity.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Structure", "Structure")
                        .WithMany("StructurePermissions")
                        .HasForeignKey("StructureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Structure");
                });

            modelBuilder.Entity("Entity.Models.User", b =>
                {
                    b.HasOne("Entity.Models.Structure", "Structure")
                        .WithMany()
                        .HasForeignKey("StructureId");

                    b.Navigation("Structure");
                });

            modelBuilder.Entity("Entity.Models.UserCertificate", b =>
                {
                    b.HasOne("Entity.Models.User", "Owner")
                        .WithOne("UserCerifiticate")
                        .HasForeignKey("Entity.Models.UserCertificate", "OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Entity.Models.Learning.SimpleQuestionInExam", b =>
                {
                    b.HasOne("Entity.Models.Learning.Exam", null)
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.Models.Learning.Author", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Entity.Models.Learning.Exam", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Entity.Models.Structure", b =>
                {
                    b.Navigation("StructurePermissions");
                });

            modelBuilder.Entity("Entity.Models.User", b =>
                {
                    b.Navigation("SignMethods");

                    b.Navigation("UserCerifiticate")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
