//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceCryptoAuth
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://v1.cryptoauth.plugin.server.dsv.eimzo.yt.uz/", ConfigurationName="ServiceCryptoAuth.CryptoAuth")]
    public interface CryptoAuth
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://v1.cryptoauth.plugin.server.dsv.eimzo.yt.uz/CryptoAuth/verifyDigestRequest" +
            "", ReplyAction="http://v1.cryptoauth.plugin.server.dsv.eimzo.yt.uz/CryptoAuth/verifyDigestRespons" +
            "e")]
        System.Threading.Tasks.Task<ServiceCryptoAuth.verifyDigestResponse> verifyDigestAsync(ServiceCryptoAuth.verifyDigestRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://v1.cryptoauth.plugin.server.dsv.eimzo.yt.uz/CryptoAuth/verifySignatureRequ" +
            "est", ReplyAction="http://v1.cryptoauth.plugin.server.dsv.eimzo.yt.uz/CryptoAuth/verifySignatureResp" +
            "onse")]
        System.Threading.Tasks.Task<ServiceCryptoAuth.verifySignatureResponse> verifySignatureAsync(ServiceCryptoAuth.verifySignatureRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://v1.cryptoauth.plugin.server.dsv.eimzo.yt.uz/CryptoAuth/getDigestRequest", ReplyAction="http://v1.cryptoauth.plugin.server.dsv.eimzo.yt.uz/CryptoAuth/getDigestResponse")]
        System.Threading.Tasks.Task<ServiceCryptoAuth.getDigestResponse> getDigestAsync(ServiceCryptoAuth.getDigestRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class verifyDigestRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="verifyDigest", Namespace="http://v1.cryptoauth.plugin.server.dsv.eimzo.yt.uz/", Order=0)]
        public ServiceCryptoAuth.verifyDigestRequestBody Body;
        
        public verifyDigestRequest()
        {
        }
        
        public verifyDigestRequest(ServiceCryptoAuth.verifyDigestRequestBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class verifyDigestRequestBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string digestHex;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string signatureHex;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string signerCertB64;
        
        public verifyDigestRequestBody()
        {
        }
        
        public verifyDigestRequestBody(string digestHex, string signatureHex, string signerCertB64)
        {
            this.digestHex = digestHex;
            this.signatureHex = signatureHex;
            this.signerCertB64 = signerCertB64;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class verifyDigestResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="verifyDigestResponse", Namespace="http://v1.cryptoauth.plugin.server.dsv.eimzo.yt.uz/", Order=0)]
        public ServiceCryptoAuth.verifyDigestResponseBody Body;
        
        public verifyDigestResponse()
        {
        }
        
        public verifyDigestResponse(ServiceCryptoAuth.verifyDigestResponseBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class verifyDigestResponseBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string @return;
        
        public verifyDigestResponseBody()
        {
        }
        
        public verifyDigestResponseBody(string @return)
        {
            this.@return = @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class verifySignatureRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="verifySignature", Namespace="http://v1.cryptoauth.plugin.server.dsv.eimzo.yt.uz/", Order=0)]
        public ServiceCryptoAuth.verifySignatureRequestBody Body;
        
        public verifySignatureRequest()
        {
        }
        
        public verifySignatureRequest(ServiceCryptoAuth.verifySignatureRequestBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class verifySignatureRequestBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string textB64;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string signatureHex;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string signerCertB64;
        
        public verifySignatureRequestBody()
        {
        }
        
        public verifySignatureRequestBody(string textB64, string signatureHex, string signerCertB64)
        {
            this.textB64 = textB64;
            this.signatureHex = signatureHex;
            this.signerCertB64 = signerCertB64;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class verifySignatureResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="verifySignatureResponse", Namespace="http://v1.cryptoauth.plugin.server.dsv.eimzo.yt.uz/", Order=0)]
        public ServiceCryptoAuth.verifySignatureResponseBody Body;
        
        public verifySignatureResponse()
        {
        }
        
        public verifySignatureResponse(ServiceCryptoAuth.verifySignatureResponseBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class verifySignatureResponseBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string @return;
        
        public verifySignatureResponseBody()
        {
        }
        
        public verifySignatureResponseBody(string @return)
        {
            this.@return = @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class getDigestRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="getDigest", Namespace="http://v1.cryptoauth.plugin.server.dsv.eimzo.yt.uz/", Order=0)]
        public ServiceCryptoAuth.getDigestRequestBody Body;
        
        public getDigestRequest()
        {
        }
        
        public getDigestRequest(ServiceCryptoAuth.getDigestRequestBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class getDigestRequestBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string dataB64;
        
        public getDigestRequestBody()
        {
        }
        
        public getDigestRequestBody(string dataB64)
        {
            this.dataB64 = dataB64;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class getDigestResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="getDigestResponse", Namespace="http://v1.cryptoauth.plugin.server.dsv.eimzo.yt.uz/", Order=0)]
        public ServiceCryptoAuth.getDigestResponseBody Body;
        
        public getDigestResponse()
        {
        }
        
        public getDigestResponse(ServiceCryptoAuth.getDigestResponseBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="")]
    public partial class getDigestResponseBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string @return;
        
        public getDigestResponseBody()
        {
        }
        
        public getDigestResponseBody(string @return)
        {
            this.@return = @return;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface CryptoAuthChannel : ServiceCryptoAuth.CryptoAuth, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class CryptoAuthClient : System.ServiceModel.ClientBase<ServiceCryptoAuth.CryptoAuth>, ServiceCryptoAuth.CryptoAuth
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CryptoAuthClient() : 
                base(CryptoAuthClient.GetDefaultBinding(), CryptoAuthClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.CryptoAuthPort.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CryptoAuthClient(EndpointConfiguration endpointConfiguration) : 
                base(CryptoAuthClient.GetBindingForEndpoint(endpointConfiguration), CryptoAuthClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CryptoAuthClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CryptoAuthClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CryptoAuthClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CryptoAuthClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CryptoAuthClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceCryptoAuth.verifyDigestResponse> ServiceCryptoAuth.CryptoAuth.verifyDigestAsync(ServiceCryptoAuth.verifyDigestRequest request)
        {
            return base.Channel.verifyDigestAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceCryptoAuth.verifyDigestResponse> verifyDigestAsync(string digestHex, string signatureHex, string signerCertB64)
        {
            ServiceCryptoAuth.verifyDigestRequest inValue = new ServiceCryptoAuth.verifyDigestRequest();
            inValue.Body = new ServiceCryptoAuth.verifyDigestRequestBody();
            inValue.Body.digestHex = digestHex;
            inValue.Body.signatureHex = signatureHex;
            inValue.Body.signerCertB64 = signerCertB64;
            return ((ServiceCryptoAuth.CryptoAuth)(this)).verifyDigestAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceCryptoAuth.verifySignatureResponse> ServiceCryptoAuth.CryptoAuth.verifySignatureAsync(ServiceCryptoAuth.verifySignatureRequest request)
        {
            return base.Channel.verifySignatureAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceCryptoAuth.verifySignatureResponse> verifySignatureAsync(string textB64, string signatureHex, string signerCertB64)
        {
            ServiceCryptoAuth.verifySignatureRequest inValue = new ServiceCryptoAuth.verifySignatureRequest();
            inValue.Body = new ServiceCryptoAuth.verifySignatureRequestBody();
            inValue.Body.textB64 = textB64;
            inValue.Body.signatureHex = signatureHex;
            inValue.Body.signerCertB64 = signerCertB64;
            return ((ServiceCryptoAuth.CryptoAuth)(this)).verifySignatureAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceCryptoAuth.getDigestResponse> ServiceCryptoAuth.CryptoAuth.getDigestAsync(ServiceCryptoAuth.getDigestRequest request)
        {
            return base.Channel.getDigestAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceCryptoAuth.getDigestResponse> getDigestAsync(string dataB64)
        {
            ServiceCryptoAuth.getDigestRequest inValue = new ServiceCryptoAuth.getDigestRequest();
            inValue.Body = new ServiceCryptoAuth.getDigestRequestBody();
            inValue.Body.dataB64 = dataB64;
            return ((ServiceCryptoAuth.CryptoAuth)(this)).getDigestAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.CryptoAuthPort))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.CryptoAuthPort))
            {
                return new System.ServiceModel.EndpointAddress("http://192.168.122.22:9090/dsvs/cryptoauth/v1");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return CryptoAuthClient.GetBindingForEndpoint(EndpointConfiguration.CryptoAuthPort);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return CryptoAuthClient.GetEndpointAddress(EndpointConfiguration.CryptoAuthPort);
        }
        
        public enum EndpointConfiguration
        {
            
            CryptoAuthPort,
        }
    }
}
